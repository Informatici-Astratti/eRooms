generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Ospiti {
  idOspite        String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  nome            String?
  cognome         String?
  cf              String?
  tipoDocumento   tipo_documento?
  idDocumento     String?
  dataRilascio    DateTime?       @db.Date
  dataScadenza    DateTime?       @db.Date
  fotoDocumento   String?
  codPrenotazione String          @db.Uuid
  Prenotazioni    Prenotazioni    @relation(fields: [codPrenotazione], references: [idPrenotazione])
}

model Pagamenti {
  idPagamento     String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  importo         Float          @db.Real
  dataSaldo       DateTime?      @db.Timestamp(6)
  codPrenotazione String         @db.Uuid
  created_at      DateTime       @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)
  updated_at      DateTime       @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)
  stripePaymentId String         @unique @default("")
  tipoPagamento   tipo_pagamento @default(ALTRO)
  nome            String
  descrizione     String
  Prenotazioni    Prenotazioni   @relation(fields: [codPrenotazione], references: [idPrenotazione])
}

model Prenotazioni {
  idPrenotazione                           String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  dataCreazione                            DateTime           @default(now()) @db.Timestamptz(6)
  dataInizio                               DateTime           @db.Timestamp(6)
  dataFine                                 DateTime           @db.Timestamp(6)
  codStanza                                String             @db.Uuid
  codProfilo                               String
  stato                                    stato_prenotazione @default(PRENOTATA)
  Ospiti                                   Ospiti[]
  Pagamenti                                Pagamenti[]
  Profili_Prenotazioni_codProfiloToProfili Profili            @relation("Prenotazioni_codProfiloToProfili", fields: [codProfilo], references: [idProfilo])
  Stanze                                   Stanze             @relation(fields: [codStanza], references: [idStanza])
}

model Profili {
  idProfilo                                     String         @id
  nome                                          String
  cognome                                       String
  email                                         String         @default("")
  telefono                                      String?
  cf                                            String?
  piva                                          String?
  dataNascita                                   DateTime       @db.Date
  genere                                        genere
  indirizzo                                     String?
  ruolo                                         ruolo
  stripeCustomerId                              String?
  Prenotazioni_Prenotazioni_codProfiloToProfili Prenotazioni[] @relation("Prenotazioni_codProfiloToProfili")
  TurniPulizie                                  TurniPulizie[]
}

model Stanze {
  idStanza      String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  nome          String
  capienza      Int            @db.SmallInt
  descrizione   String
  costoStandard Float          @db.Real
  FotoStanze    FotoStanze[]
  Prenotazioni  Prenotazioni[]
  Pulizie       Pulizie?
  Tariffe       Tariffe[]
  TurniPulizie  TurniPulizie[]
}

model Tariffe {
  idTariffa      String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  codStanza      String          @db.Uuid
  dataInizio     DateTime        @db.Timestamp(6)
  dataFine       DateTime        @db.Timestamp(6)
  tipoVariazione tipo_variazione
  variazione     Float           @db.Real
  Stanze         Stanze          @relation(fields: [codStanza], references: [idStanza], onDelete: Cascade)
}

model Proprieta {
  id                   String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  nome                 String
  email                String?
  telefono             String?
  registrazioneSocieta String
  indirizzo            String
  citta                String
  CAP                  String
  paese                String
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Pulizie {
  codStanza           String        @id @db.Uuid
  stato               stato_pulizia @default(PULITA)
  ultimoAggiornamento DateTime      @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)
  Stanze              Stanze        @relation(fields: [codStanza], references: [idStanza], onDelete: Cascade)
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model TurniPulizie {
  idTurno       String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  codStanza     String    @db.Uuid
  codGovernante String
  dataInizio    DateTime  @db.Date
  dataFine      DateTime? @db.Date
  Profili       Profili   @relation(fields: [codGovernante], references: [idProfilo], onDelete: Cascade)
  Stanze        Stanze    @relation(fields: [codStanza], references: [idStanza], onDelete: Cascade)
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model FotoStanze {
  idFoto    String  @id
  codStanza String? @db.Uuid
  url       String
  Stanze    Stanze? @relation(fields: [codStanza], references: [idStanza], onDelete: Cascade)
}

enum genere {
  UOMO
  DONNA
  NS
}

enum ruolo {
  CLIENTE
  PROPRIETARIO
  GOVERNANTE
}

enum stato_prenotazione {
  PRENOTATA
  CONFERMATA
  ANNULLATA_UTENTE
  ANNULLATA_HOST
}

enum tipo_documento {
  CARTAIDENTITA
  PATENTE
  PASSAPORTO
}

enum stato_pulizia {
  PULITA
  DA_PULIRE
}

enum tipo_variazione {
  AUMENTO_PERCENTUALE
  SCONTO_PERCENTUALE
  AUMENTO_FISSO
  SCONTO_FISSO
  NULLA
}

enum tipo_pagamento {
  ALLOGGIO
  TASSA
  ALTRO
}
